@document.meta
title: utilisation
description: Comment choisir le bon design pattern
authors: kenan
categories: java
created: 2023-11-27T08:21:54+0000
updated: 2023-11-27T08:49:06+0000
version: 1.1.1
@end

* {:$\java/Singleton:}[*Singleton*]
  - Lorsqu'il est nécessaire d'avoir une seule instance d'une classe
  - eg: base de données, log, configuration, factory, etc.

* {:$\java/Factory:}[*Factory*]
  - Lorsqu'il est nécessaire de créer des objets de différentes classes qui ont une même interface
  - Afin de ne pas utiliser les sous-classes dans l'application mais seulement les classes mères / interfaces.

* {:$\java/AbstractFactory:}[*Abstract Factory*]
  - Même principe que la Factory mais lorsqu'il y a plusieurs classes mères / interfaces à créer pour la même application
  - Il s'agit donc d'une factory pour plusieurs objets ayant un point commun (famille d'objets)
  - /L'abstract factory pourrait appeler les factory des objets/

* {:$\java/Builder:}[*Builder*]
  - Lorsque la création d'un objet est complexe
  - Lorsque l'objet à créer a beaucoup de paramètres
  - Lorsque l'objet à créer a des paramètres optionnels

* {:$\java/Strategy:}[*Stratégie*]
  - Lorque l'application doit pouvoir changer de comportement à l'exécution
  - Comme pour la factory on appelle uniquement l'interface stratégie dans l'application
  - Permet d'enlever le switch case de l'application

* {:$\java/Observer:}[*Observer*]
  - Lorsque l'on veut être notifié lors d'événements de l'application
  - Peut simplement print dans le log mais peut aussi faire des actions
